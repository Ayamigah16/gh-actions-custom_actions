/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never;

export interface paths {
  "/": {
    /**
     * GitHub API Root
     * @description Get Hypermedia links to resources accessible in GitHub's REST API
     */
    get: operations["meta/root"];
  };
  "/advisories": {
    /**
     * List global security advisories
     * @description Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
     *
     * By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
     */
    get: operations["security-advisories/list-global-advisories"];
  };
  "/advisories/{ghsa_id}": {
    /**
     * Get a global security advisory
     * @description Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
     */
    get: operations["security-advisories/get-global-advisory"];
  };
  "/app": {
    /**
     * Get the authenticated app
     * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/get-authenticated"];
  };
  "/app-manifests/{code}/conversions": {
    /**
     * Create a GitHub App from a manifest
     * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     */
    post: operations["apps/create-from-manifest"];
  };
  "/app/hook/config": {
    /**
     * Get a webhook configuration for an app
     * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/get-webhook-config-for-app"];
    /**
     * Update a webhook configuration for an app
     * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    patch: operations["apps/update-webhook-config-for-app"];
  };
  "/app/hook/deliveries": {
    /**
     * List deliveries for an app webhook
     * @description Returns a list of webhook deliveries for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/list-webhook-deliveries"];
  };
  "/app/hook/deliveries/{delivery_id}": {
    /**
     * Get a delivery for an app webhook
     * @description Returns a delivery for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/get-webhook-delivery"];
  };
  "/app/hook/deliveries/{delivery_id}/attempts": {
    /**
     * Redeliver a delivery for an app webhook
     * @description Redeliver a delivery for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    post: operations["apps/redeliver-webhook-delivery"];
  };
  "/app/installation-requests": {
    /**
     * List installation requests for the authenticated app
     * @description Lists all the pending installation requests for the authenticated GitHub App.
     */
    get: operations["apps/list-installation-requests-for-authenticated-app"];
  };
  "/app/installations": {
    /**
     * List installations for the authenticated app
     * @description You must use a [JWT](https://docs.github.com/enterprise-server@3.9/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * The permissions the installation has are included under the `permissions` key.
     */
    get: operations["apps/list-installations"];
  };
  "/app/installations/{installation_id}": {
    /**
     * Get an installation for the authenticated app
     * @description Enables an authenticated GitHub App to find an installation's information using the installation id.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/get-installation"];
    /**
     * Delete an installation for the authenticated app
     * @description Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    delete: operations["apps/delete-installation"];
  };
  "/app/installations/{installation_id}/access_tokens": {
    /**
     * Create an installation access token for an app
     * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
     *
     * Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
     *
     * Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
     *
     * When using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    post: operations["apps/create-installation-access-token"];
  };
  "/app/installations/{installation_id}/suspended": {
    /**
     * Suspend an app installation
     * @description Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    put: operations["apps/suspend-installation"];
    /**
     * Unsuspend an app installation
     * @description Removes a GitHub App installation suspension.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    delete: operations["apps/unsuspend-installation"];
  };
  "/applications/{client_id}/grant": {
    /**
     * Delete an app authorization
     * @description OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     * Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    delete: operations["apps/delete-authorization"];
  };
  "/applications/{client_id}/token": {
    /**
     * Check a token
     * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
     */
    post: operations["apps/check-token"];
    /**
     * Delete an app token
     * @description OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password.
     */
    delete: operations["apps/delete-token"];
    /**
     * Reset a token
     * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    patch: operations["apps/reset-token"];
  };
  "/applications/{client_id}/token/scoped": {
    /**
     * Create a scoped access token
     * @description Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
     * which repositories the token can access and which permissions are granted to the
     * token.
     *
     * Invalid tokens will return `404 NOT FOUND`.
     *
     * You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)
     * when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App
     * as the username and password.
     */
    post: operations["apps/scope-token"];
  };
  "/apps/{app_slug}": {
    /**
     * Get an app
     * @description **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     */
    get: operations["apps/get-by-slug"];
  };
  "/assignments/{assignment_id}": {
    /**
     * Get an assignment
     * @description Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     */
    get: operations["classroom/get-an-assignment"];
  };
  "/assignments/{assignment_id}/accepted_assignments": {
    /**
     * List accepted assignments for an assignment
     * @description Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     */
    get: operations["classroom/list-accepted-assigments-for-an-assignment"];
  };
  "/assignments/{assignment_id}/grades": {
    /**
     * Get assignment grades
     * @description Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     */
    get: operations["classroom/get-assignment-grades"];
  };
  "/classrooms": {
    /**
     * List classrooms
     * @description Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
     */
    get: operations["classroom/list-classrooms"];
  };
  "/classrooms/{classroom_id}": {
    /**
     * Get a classroom
     * @description Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
     */
    get: operations["classroom/get-a-classroom"];
  };
  "/classrooms/{classroom_id}/assignments": {
    /**
     * List assignments for a classroom
     * @description Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
     */
    get: operations["classroom/list-assignments-for-a-classroom"];
  };
  "/codes_of_conduct": {
    /**
     * Get all codes of conduct
     * @description Returns array of all GitHub's codes of conduct.
     */
    get: operations["codes-of-conduct/get-all-codes-of-conduct"];
  };
  "/codes_of_conduct/{key}": {
    /**
     * Get a code of conduct
     * @description Returns information about the specified GitHub code of conduct.
     */
    get: operations["codes-of-conduct/get-conduct-code"];
  };
  "/emojis": {
    /**
     * Get emojis
     * @description Lists all the emojis available to use on GitHub.
     */
    get: operations["emojis/get"];
  };
  "/enterprises/{enterprise}/copilot/usage": {
    /**
     * Get a summary of Copilot usage for enterprise members
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
     * for all users across organizations with access to Copilot within your enterprise, with a further breakdown of suggestions, acceptances,
     * and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.
     *
     * The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
     * and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
     * they must have telemetry enabled in their IDE.
     *
     * Only the owners and billing managers of enterprises with a Copilot Business or Enterprise subscription can view Copilot usage
     * metrics for the enterprise.
     *
     * OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
     */
    get: operations["copilot/usage-metrics-for-enterprise"];
  };
  "/enterprises/{enterprise}/dependabot/alerts": {
    /**
     * List Dependabot alerts for an enterprise
     * @description Lists Dependabot alerts for repositories that are owned by the specified enterprise.
     *
     * The authenticated user must be a member of the enterprise to use this endpoint.
     *
     * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
     */
    get: operations["dependabot/list-alerts-for-enterprise"];
  };
  "/enterprises/{enterprise}/secret-scanning/alerts": {
    /**
     * List secret scanning alerts for an enterprise
     * @description Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
     *
     * Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     *
     * The authenticated user must be a member of the enterprise in order to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
     */
    get: operations["secret-scanning/list-alerts-for-enterprise"];
  };
  "/events": {
    /**
     * List public events
     * @description We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     */
    get: operations["activity/list-public-events"];
  };
  "/feeds": {
    /**
     * Get feeds
     * @description Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
     *
     * *   **Timeline**: The GitHub global public timeline
     * *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
     *
     * By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     */
    get: operations["activity/get-feeds"];
  };
  "/gists": {
    /**
     * List gists for the authenticated user
     * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     */
    get: operations["gists/list"];
    /**
     * Create a gist
     * @description Allows you to add a new gist with one or more files.
     *
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     */
    post: operations["gists/create"];
  };
  "/gists/public": {
    /**
     * List public gists
     * @description List public gists sorted by most recently updated to least recently updated.
     *
     * Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     */
    get: operations["gists/list-public"];
  };
  "/gists/starred": {
    /**
     * List starred gists
     * @description List the authenticated user's starred gists:
     */
    get: operations["gists/list-starred"];
  };
  "/gists/{gist_id}": {
    /**
     * Get a gist
     * @description Gets a specified gist.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    get: operations["gists/get"];
    /** Delete a gist */
    delete: operations["gists/delete"];
    /**
     * Update a gist
     * @description Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     */
    patch: operations["gists/update"];
  };
  "/gists/{gist_id}/comments": {
    /**
     * List gist comments
     * @description Lists the comments on a gist.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    get: operations["gists/list-comments"];
    /**
     * Create a gist comment
     * @description Creates a comment on a gist.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    post: operations["gists/create-comment"];
  };
  "/gists/{gist_id}/comments/{comment_id}": {
    /**
     * Get a gist comment
     * @description Gets a comment on a gist.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    get: operations["gists/get-comment"];
    /** Delete a gist comment */
    delete: operations["gists/delete-comment"];
    /**
     * Update a gist comment
     * @description Updates a comment on a gist.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    patch: operations["gists/update-comment"];
  };
  "/gists/{gist_id}/commits": {
    /** List gist commits */
    get: operations["gists/list-commits"];
  };
  "/gists/{gist_id}/forks": {
    /** List gist forks */
    get: operations["gists/list-forks"];
    /** Fork a gist */
    post: operations["gists/fork"];
  };
  "/gists/{gist_id}/star": {
    /** Check if a gist is starred */
    get: operations["gists/check-is-starred"];
    /**
     * Star a gist
     * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     */
    put: operations["gists/star"];
    /** Unstar a gist */
    delete: operations["gists/unstar"];
  };
  "/gists/{gist_id}/{sha}": {
    /**
     * Get a gist revision
     * @description Gets a specified gist revision.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     */
    get: operations["gists/get-revision"];
  };
  "/gitignore/templates": {
    /**
     * Get all gitignore templates
     * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
     */
    get: operations["gitignore/get-all-templates"];
  };
  "/gitignore/templates/{name}": {
    /**
     * Get a gitignore template
     * @description Get the content of a gitignore template.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
     */
    get: operations["gitignore/get-template"];
  };
  "/installation/repositories": {
    /**
     * List repositories accessible to the app installation
     * @description List repositories that an app installation can access.
     */
    get: operations["apps/list-repos-accessible-to-installation"];
  };
  "/installation/token": {
    /**
     * Revoke an installation access token
     * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     *
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
     */
    delete: operations["apps/revoke-installation-access-token"];
  };
  "/issues": {
    /**
     * List issues assigned to the authenticated user
     * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member
     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
     * necessarily assigned to you.
     *
     * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
     * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
     * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     */
    get: operations["issues/list"];
  };
  "/licenses": {
    /**
     * Get all commonly used licenses
     * @description Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
     */
    get: operations["licenses/get-all-commonly-used"];
  };
  "/licenses/{license}": {
    /**
     * Get a license
     * @description Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
     */
    get: operations["licenses/get"];
  };
  "/markdown": {
    /** Render a Markdown document */
    post: operations["markdown/render"];
  };
  "/markdown/raw": {
    /**
     * Render a Markdown document in raw mode
     * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     */
    post: operations["markdown/render-raw"];
  };
  "/marketplace_listing/accounts/{account_id}": {
    /**
     * Get a subscription plan for an account
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/get-subscription-plan-for-account"];
  };
  "/marketplace_listing/plans": {
    /**
     * List plans
     * @description Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/list-plans"];
  };
  "/marketplace_listing/plans/{plan_id}/accounts": {
    /**
     * List accounts for a plan
     * @description Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/list-accounts-for-plan"];
  };
  "/marketplace_listing/stubbed/accounts/{account_id}": {
    /**
     * Get a subscription plan for an account (stubbed)
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/get-subscription-plan-for-account-stubbed"];
  };
  "/marketplace_listing/stubbed/plans": {
    /**
     * List plans (stubbed)
     * @description Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/list-plans-stubbed"];
  };
  "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    /**
     * List accounts for a plan (stubbed)
     * @description Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: operations["apps/list-accounts-for-plan-stubbed"];
  };
  "/meta": {
    /**
     * Get GitHub meta information
     * @description Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
     *
     * The API's response also includes a list of GitHub's domain names.
     *
     * The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
     *
     * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
     */
    get: operations["meta/get"];
  };
  "/networks/{owner}/{repo}/events": {
    /** List public events for a network of repositories */
    get: operations["activity/list-public-events-for-repo-network"];
  };
  "/notifications": {
    /**
     * List notifications for the authenticated user
     * @description List all notifications for the current user, sorted by most recently updated.
     */
    get: operations["activity/list-notifications-for-authenticated-user"];
    /**
     * Mark notifications as read
     * @description Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     */
    put: operations["activity/mark-notifications-as-read"];
  };
  "/notifications/threads/{thread_id}": {
    /**
     * Get a thread
     * @description Gets information about a notification thread.
     */
    get: operations["activity/get-thread"];
    /**
     * Mark a thread as done
     * @description Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
     */
    delete: operations["activity/mark-thread-as-done"];
    /**
     * Mark a thread as read
     * @description Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
     */
    patch: operations["activity/mark-thread-as-read"];
  };
  "/notifications/threads/{thread_id}/subscription": {
    /**
     * Get a thread subscription for the authenticated user
     * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     */
    get: operations["activity/get-thread-subscription-for-authenticated-user"];
    /**
     * Set a thread subscription
     * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     *
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     *
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
     */
    put: operations["activity/set-thread-subscription"];
    /**
     * Delete a thread subscription
     * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
     */
    delete: operations["activity/delete-thread-subscription"];
  };
  "/octocat": {
    /**
     * Get Octocat
     * @description Get the octocat as ASCII art
     */
    get: operations["meta/get-octocat"];
  };
  "/organizations": {
    /**
     * List organizations
     * @description Lists all organizations, in the order that they were created.
     *
     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
     */
    get: operations["orgs/list"];
  };
  "/orgs/{org}": {
    /**
     * Get an organization
     * @description Gets information about an organization.
     *
     * When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     *
     * To see the full details about an organization, the authenticated user must be an organization owner.
     *
     * The values returned by this endpoint are set by the "Update an organization" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the "Update an organization" endpoint have been overwritten by that configuration:
     *
     * - advanced_security_enabled_for_new_repositories
     * - dependabot_alerts_enabled_for_new_repositories
     * - dependabot_security_updates_enabled_for_new_repositories
     * - dependency_graph_enabled_for_new_repositories
     * - secret_scanning_enabled_for_new_repositories
     * - secret_scanning_push_protection_enabled_for_new_repositories
     *
     * For more information on security configurations, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
     *
     * To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
     */
    get: operations["orgs/get"];
    /**
     * Delete an organization
     * @description Deletes an organization and all its repositories.
     *
     * The organization login will be unavailable for 90 days after deletion.
     *
     * Please review the Terms of Service regarding account deletion before using this endpoint:
     *
     * https://docs.github.com/site-policy/github-terms/github-terms-of-service
     */
    delete: operations["orgs/delete"];
    /**
     * Update an organization
     * @description **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
     *
     * Updates the organization's profile and member privileges.
     *
     * With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:
     *
     * - advanced_security_enabled_for_new_repositories
     * - dependabot_alerts_enabled_for_new_repositories
     * - dependabot_security_updates_enabled_for_new_repositories
     * - dependency_graph_enabled_for_new_repositories
     * - secret_scanning_enabled_for_new_repositories
     * - secret_scanning_push_protection_enabled_for_new_repositories
     *
     * For more information on setting a default security configuration, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
     *
     * The authenticated user must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
     */
    patch: operations["orgs/update"];
  };
  "/orgs/{org}/actions/cache/usage": {
    /**
     * Get GitHub Actions cache usage for an organization
     * @description Gets the total GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     *
     * OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     */
    get: operations["actions/get-actions-cache-usage-for-org"];
  };
  "/orgs/{org}/actions/cache/usage-by-repository": {
    /**
     * List repositories with GitHub Actions cache usage for an organization
     * @description Lists repositories and their GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     *
     * OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     */
    get: operations["actions/get-actions-cache-usage-by-repo-for-org"];
  };
  "/orgs/{org}/actions/oidc/customization/sub": {
    /**
     * Get the customization template for an OIDC subject claim for an organization
     * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     */
    get: operations["oidc/get-oidc-custom-sub-template-for-org"];
    /**
     * Set the customization template for an OIDC subject claim for an organization
     * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
     *
     * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     */
    put: operations["oidc/update-oidc-custom-sub-template-for-org"];
  };
  "/orgs/{org}/actions/permissions": {
    /**
     * Get GitHub Actions permissions for an organization
     * @description Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["actions/get-github-actions-permissions-organization"];
    /**
     * Set GitHub Actions permissions for an organization
     * @description Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["actions/set-github-actions-permissions-organization"];
  };
  "/orgs/{org}/actions/permissions/repositories": {
    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["actions/list-selected-repositories-enabled-github-actions-organization"];
    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["actions/set-selected-repositories-enabled-github-actions-organization"];
  };
  "/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    /**
     * Enable a selected repository for GitHub Actions in an organization
     * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["actions/enable-selected-repository-github-actions-organization"];
    /**
     * Disable a selected repository for GitHub Actions in an organization
     * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["actions/disable-selected-repository-github-actions-organization"];
  };
  "/orgs/{org}/actions/permissions/selected-actions": {
    /**
     * Get allowed actions and reusable workflows for an organization
     * @description Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["actions/get-allowed-actions-organization"];
    /**
     * Set allowed actions and reusable workflows for an organization
     * @description Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["actions/set-allowed-actions-organization"];
  };
  "/orgs/{org}/actions/permissions/workflow": {
    /**
     * Get default workflow permissions for an organization
     * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
     * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["actions/get-github-actions-default-workflow-permissions-organization"];
    /**
     * Set default workflow permissions for an organization
     * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
     * can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["actions/set-github-actions-default-workflow-permissions-organization"];
  };
  "/orgs/{org}/actions/runners": {
    /**
     * List self-hosted runners for an organization
     * @description Lists all self-hosted runners configured in an organization.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-self-hosted-runners-for-org"];
  };
  "/orgs/{org}/actions/runners/downloads": {
    /**
     * List runner applications for an organization
     * @description Lists binaries for the runner application that you can download and run.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-runner-applications-for-org"];
  };
  "/orgs/{org}/actions/runners/generate-jitconfig": {
    /**
     * Create configuration for a just-in-time runner for an organization
     * @description Generates a configuration that can be passed to the runner application at startup.
     *
     * The authenticated user must have admin access to the organization.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    post: operations["actions/generate-runner-jitconfig-for-org"];
  };
  "/orgs/{org}/actions/runners/registration-token": {
    /**
     * Create a registration token for an organization
     * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
     *
     * ```
     * ./config.sh --url https://github.com/octo-org --token TOKEN
     * ```
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    post: operations["actions/create-registration-token-for-org"];
  };
  "/orgs/{org}/actions/runners/remove-token": {
    /**
     * Create a remove token for an organization
     * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
     *
     * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    post: operations["actions/create-remove-token-for-org"];
  };
  "/orgs/{org}/actions/runners/{runner_id}": {
    /**
     * Get a self-hosted runner for an organization
     * @description Gets a specific self-hosted runner configured in an organization.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/get-self-hosted-runner-for-org"];
    /**
     * Delete a self-hosted runner from an organization
     * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    delete: operations["actions/delete-self-hosted-runner-from-org"];
  };
  "/orgs/{org}/actions/runners/{runner_id}/labels": {
    /**
     * List labels for a self-hosted runner for an organization
     * @description Lists all labels for a self-hosted runner configured in an organization.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-labels-for-self-hosted-runner-for-org"];
    /**
     * Set custom labels for a self-hosted runner for an organization
     * @description Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in an organization.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    put: operations["actions/set-custom-labels-for-self-hosted-runner-for-org"];
    /**
     * Add custom labels to a self-hosted runner for an organization
     * @description Adds custom labels to a self-hosted runner configured in an organization.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    post: operations["actions/add-custom-labels-to-self-hosted-runner-for-org"];
    /**
     * Remove all custom labels from a self-hosted runner for an organization
     * @description Remove all custom labels from a self-hosted runner configured in an
     * organization. Returns the remaining read-only labels from the runner.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    delete: operations["actions/remove-all-custom-labels-from-self-hosted-runner-for-org"];
  };
  "/orgs/{org}/actions/runners/{runner_id}/labels/{name}": {
    /**
     * Remove a custom label from a self-hosted runner for an organization
     * @description Remove a custom label from a self-hosted runner configured
     * in an organization. Returns the remaining labels from the runner.
     *
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     *
     * Authenticated users must have admin access to the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    delete: operations["actions/remove-custom-label-from-self-hosted-runner-for-org"];
  };
  "/orgs/{org}/actions/secrets": {
    /**
     * List organization secrets
     * @description Lists all secrets available in an organization without revealing their
     * encrypted values.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-org-secrets"];
  };
  "/orgs/{org}/actions/secrets/public-key": {
    /**
     * Get an organization public key
     * @description Gets your public key, which you need to encrypt secrets. You need to
     * encrypt a secret before you can create or update secrets.
     *
     * The authenticated user must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    get: operations["actions/get-org-public-key"];
  };
  "/orgs/{org}/actions/secrets/{secret_name}": {
    /**
     * Get an organization secret
     * @description Gets a single organization secret without revealing its encrypted value.
     *
     * The authenticated user must have collaborator access to a repository to create, update, or read secrets
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    get: operations["actions/get-org-secret"];
    /**
     * Create or update an organization secret
     * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
     * use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    put: operations["actions/create-or-update-org-secret"];
    /**
     * Delete an organization secret
     * @description Deletes a secret in an organization using the secret name.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    delete: operations["actions/delete-org-secret"];
  };
  "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    /**
     * List selected repositories for an organization secret
     * @description Lists all repositories that have been selected when the `visibility`
     * for repository access to a secret is set to `selected`.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-selected-repos-for-org-secret"];
    /**
     * Set selected repositories for an organization secret
     * @description Replaces all repositories for an organization secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    put: operations["actions/set-selected-repos-for-org-secret"];
  };
  "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    /**
     * Add selected repository to an organization secret
     * @description Adds a repository to an organization secret when the `visibility` for
     * repository access is set to `selected`. For more information about setting the visibility, see [Create or
     * update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    put: operations["actions/add-selected-repo-to-org-secret"];
    /**
     * Remove selected repository from an organization secret
     * @description Removes a repository from an organization secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    delete: operations["actions/remove-selected-repo-from-org-secret"];
  };
  "/orgs/{org}/actions/variables": {
    /**
     * List organization variables
     * @description Lists all organization variables.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-org-variables"];
    /**
     * Create an organization variable
     * @description Creates an organization variable that you can reference in a GitHub Actions workflow.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    post: operations["actions/create-org-variable"];
  };
  "/orgs/{org}/actions/variables/{name}": {
    /**
     * Get an organization variable
     * @description Gets a specific variable in an organization.
     *
     * The authenticated user must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    get: operations["actions/get-org-variable"];
    /**
     * Delete an organization variable
     * @description Deletes an organization variable using the variable name.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    delete: operations["actions/delete-org-variable"];
    /**
     * Update an organization variable
     * @description Updates an organization variable that you can reference in a GitHub Actions workflow.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    patch: operations["actions/update-org-variable"];
  };
  "/orgs/{org}/actions/variables/{name}/repositories": {
    /**
     * List selected repositories for an organization variable
     * @description Lists all repositories that can access an organization variable
     * that is available to selected repositories.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    get: operations["actions/list-selected-repos-for-org-variable"];
    /**
     * Set selected repositories for an organization variable
     * @description Replaces all repositories for an organization variable that is available
     * to selected repositories. Organization variables that are available to selected
     * repositories have their `visibility` field set to `selected`.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    put: operations["actions/set-selected-repos-for-org-variable"];
  };
  "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    /**
     * Add selected repository to an organization variable
     * @description Adds a repository to an organization variable that is available to selected repositories.
     * Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
     *
     * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     */
    put: operations["actions/add-selected-repo-to-org-variable"];
    /**
     * Remove selected repository from an organization variable
     * @description Removes a repository from an organization variable that is
     * available to selected repositories. Organization variables that are available to
     * selected repositories have their `visibility` field set to `selected`.
     *
     * Authenticated users must have collaborator access to a repository to create, update, or read variables.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     */
    delete: operations["actions/remove-selected-repo-from-org-variable"];
  };
  "/orgs/{org}/blocks": {
    /**
     * List users blocked by an organization
     * @description List the users blocked by an organization.
     */
    get: operations["orgs/list-blocked-users"];
  };
  "/orgs/{org}/blocks/{username}": {
    /**
     * Check if a user is blocked by an organization
     * @description Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
     */
    get: operations["orgs/check-blocked-user"];
    /**
     * Block a user from an organization
     * @description Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
     */
    put: operations["orgs/block-user"];
    /**
     * Unblock a user from an organization
     * @description Unblocks the given user on behalf of the specified organization.
     */
    delete: operations["orgs/unblock-user"];
  };
  "/orgs/{org}/code-scanning/alerts": {
    /**
     * List code scanning alerts for an organization
     * @description Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * The authenticated user must be an owner or security manager for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     */
    get: operations["code-scanning/list-alerts-for-org"];
  };
  "/orgs/{org}/codespaces": {
    /**
     * List codespaces for the organization
     * @description Lists the codespaces associated to a specified organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/list-in-organization"];
  };
  "/orgs/{org}/codespaces/access": {
    /**
     * Manage access control for organization codespaces
     * @deprecated
     * @description Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["codespaces/set-codespaces-access"];
  };
  "/orgs/{org}/codespaces/access/selected_users": {
    /**
     * Add users to Codespaces access for an organization
     * @deprecated
     * @description Codespaces for the specified users will be billed to the organization.
     *
     * To use this endpoint, the access settings for the organization must be set to `selected_members`.
     * For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    post: operations["codespaces/set-codespaces-access-users"];
    /**
     * Remove users from Codespaces access for an organization
     * @deprecated
     * @description Codespaces for the specified users will no longer be billed to the organization.
     *
     * To use this endpoint, the access settings for the organization must be set to `selected_members`.
     * For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["codespaces/delete-codespaces-access-users"];
  };
  "/orgs/{org}/codespaces/secrets": {
    /**
     * List organization secrets
     * @description Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
     * values.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/list-org-secrets"];
  };
  "/orgs/{org}/codespaces/secrets/public-key": {
    /**
     * Get an organization public key
     * @description Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/get-org-public-key"];
  };
  "/orgs/{org}/codespaces/secrets/{secret_name}": {
    /**
     * Get an organization secret
     * @description Gets an organization development environment secret without revealing its encrypted value.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/get-org-secret"];
    /**
     * Create or update an organization secret
     * @description Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["codespaces/create-or-update-org-secret"];
    /**
     * Delete an organization secret
     * @description Deletes an organization development environment secret using the secret name.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["codespaces/delete-org-secret"];
  };
  "/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    /**
     * List selected repositories for an organization secret
     * @description Lists all repositories that have been selected when the `visibility`
     * for repository access to a secret is set to `selected`.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/list-selected-repos-for-org-secret"];
    /**
     * Set selected repositories for an organization secret
     * @description Replaces all repositories for an organization development environment secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["codespaces/set-selected-repos-for-org-secret"];
  };
  "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    /**
     * Add selected repository to an organization secret
     * @description Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["codespaces/add-selected-repo-to-org-secret"];
    /**
     * Remove selected repository from an organization secret
     * @description Removes a repository from an organization development environment secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["codespaces/remove-selected-repo-from-org-secret"];
  };
  "/orgs/{org}/copilot/billing": {
    /**
     * Get Copilot seat information and settings for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Gets information about an organization's Copilot subscription, including seat breakdown
     * and code matching policies. To configure these settings, go to your organization's settings on GitHub.com.
     * For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".
     *
     * Only organization owners can configure and view details about the organization's Copilot Business subscription.
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    get: operations["copilot/get-copilot-organization-details"];
  };
  "/orgs/{org}/copilot/billing/seats": {
    /**
     * List all Copilot seat assignments for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
     *
     * Only organization owners can configure and view details about the organization's Copilot Business or Enterprise subscription.
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    get: operations["copilot/list-copilot-seats"];
  };
  "/orgs/{org}/copilot/billing/selected_teams": {
    /**
     * Add teams to the Copilot subscription for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Purchases a GitHub Copilot seat for all users within each specified team.
     * The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
     *
     * Only organization owners can configure GitHub Copilot in their organization.
     *
     * In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
     * For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
     * For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    post: operations["copilot/add-copilot-seats-for-teams"];
    /**
     * Remove teams from the Copilot subscription for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Cancels the Copilot seat assignment for all members of each team specified.
     * This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
     *
     * For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
     *
     * For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
     *
     * Only organization owners can configure GitHub Copilot in their organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    delete: operations["copilot/cancel-copilot-seat-assignment-for-teams"];
  };
  "/orgs/{org}/copilot/billing/selected_users": {
    /**
     * Add users to the Copilot subscription for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Purchases a GitHub Copilot seat for each user specified.
     * The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
     *
     * Only organization owners can configure GitHub Copilot in their organization.
     *
     * In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
     * For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
     * For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    post: operations["copilot/add-copilot-seats-for-users"];
    /**
     * Remove users from the Copilot subscription for an organization
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Cancels the Copilot seat assignment for each user specified.
     * This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
     *
     * For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
     *
     * For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
     *
     * Only organization owners can configure GitHub Copilot in their organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    delete: operations["copilot/cancel-copilot-seat-assignment-for-users"];
  };
  "/orgs/{org}/copilot/usage": {
    /**
     * Get a summary of Copilot usage for organization members
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
     * across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
     * See the response schema tab for detailed metrics definitions.
     *
     * The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
     * and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
     * they must have telemetry enabled in their IDE.
     *
     * Copilot Business or Copilot Enterprise organization owners, and owners and billing managers of their parent enterprises, can view
     * Copilot usage metrics.
     *
     * OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:org`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
     */
    get: operations["copilot/usage-metrics-for-org"];
  };
  "/orgs/{org}/dependabot/alerts": {
    /**
     * List Dependabot alerts for an organization
     * @description Lists Dependabot alerts for an organization.
     *
     * The authenticated user must be an owner or security manager for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     */
    get: operations["dependabot/list-alerts-for-org"];
  };
  "/orgs/{org}/dependabot/secrets": {
    /**
     * List organization secrets
     * @description Lists all secrets available in an organization without revealing their
     * encrypted values.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["dependabot/list-org-secrets"];
  };
  "/orgs/{org}/dependabot/secrets/public-key": {
    /**
     * Get an organization public key
     * @description Gets your public key, which you need to encrypt secrets. You need to
     * encrypt a secret before you can create or update secrets.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["dependabot/get-org-public-key"];
  };
  "/orgs/{org}/dependabot/secrets/{secret_name}": {
    /**
     * Get an organization secret
     * @description Gets a single organization secret without revealing its encrypted value.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["dependabot/get-org-secret"];
    /**
     * Create or update an organization secret
     * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
     * permission to use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    put: operations["dependabot/create-or-update-org-secret"];
    /**
     * Delete an organization secret
     * @description Deletes a secret in an organization using the secret name.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["dependabot/delete-org-secret"];
  };
  "/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    /**
     * List selected repositories for an organization secret
     * @description Lists all repositories that have been selected when the `visibility`
     * for repository access to a secret is set to `selected`.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["dependabot/list-selected-repos-for-org-secret"];
    /**
     * Set selected repositories for an organization secret
     * @description Replaces all repositories for an organization secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["dependabot/set-selected-repos-for-org-secret"];
  };
  "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    /**
     * Add selected repository to an organization secret
     * @description Adds a repository to an organization secret when the `visibility` for
     * repository access is set to `selected`. The visibility is set when you [Create or
     * update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["dependabot/add-selected-repo-to-org-secret"];
    /**
     * Remove selected repository from an organization secret
     * @description Removes a repository from an organization secret when the `visibility`
     * for repository access is set to `selected`. The visibility is set when you [Create
     * or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["dependabot/remove-selected-repo-from-org-secret"];
  };
  "/orgs/{org}/docker/conflicts": {
    /**
     * Get list of conflicting packages during Docker migration for organization
     * @description Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
     */
    get: operations["packages/list-docker-migration-conflicting-packages-for-organization"];
  };
  "/orgs/{org}/events": {
    /** List public organization events */
    get: operations["activity/list-public-org-events"];
  };
  "/orgs/{org}/failed_invitations": {
    /**
     * List failed organization invitations
     * @description The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
     */
    get: operations["orgs/list-failed-invitations"];
  };
  "/orgs/{org}/hooks": {
    /**
     * List organization webhooks
     * @description You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    get: operations["orgs/list-webhooks"];
    /**
     * Create an organization webhook
     * @description Create a hook that posts payloads in JSON format.
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
     * edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    post: operations["orgs/create-webhook"];
  };
  "/orgs/{org}/hooks/{hook_id}": {
    /**
     * Get an organization webhook
     * @description Returns a webhook configured in an organization. To get only the webhook
     * `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    get: operations["orgs/get-webhook"];
    /**
     * Delete an organization webhook
     * @description You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    delete: operations["orgs/delete-webhook"];
    /**
     * Update an organization webhook
     * @description Updates a webhook configured in an organization. When you update a webhook,
     * the `secret` will be overwritten. If you previously had a `secret` set, you must
     * provide the same `secret` or set a new `secret` or the secret will be removed. If
     * you are only updating individual webhook `config` properties, use "[Update a webhook
     * configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    patch: operations["orgs/update-webhook"];
  };
  "/orgs/{org}/hooks/{hook_id}/config": {
    /**
     * Get a webhook configuration for an organization
     * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    get: operations["orgs/get-webhook-config-for-org"];
    /**
     * Update a webhook configuration for an organization
     * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    patch: operations["orgs/update-webhook-config-for-org"];
  };
  "/orgs/{org}/hooks/{hook_id}/deliveries": {
    /**
     * List deliveries for an organization webhook
     * @description Returns a list of webhook deliveries for a webhook configured in an organization.
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    get: operations["orgs/list-webhook-deliveries"];
  };
  "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": {
    /**
     * Get a webhook delivery for an organization webhook
     * @description Returns a delivery for a webhook configured in an organization.
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    get: operations["orgs/get-webhook-delivery"];
  };
  "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    /**
     * Redeliver a delivery for an organization webhook
     * @description Redeliver a delivery for a webhook configured in an organization.
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    post: operations["orgs/redeliver-webhook-delivery"];
  };
  "/orgs/{org}/hooks/{hook_id}/pings": {
    /**
     * Ping an organization webhook
     * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
     * to be sent to the hook.
     *
     * You must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
     * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     */
    post: operations["orgs/ping-webhook"];
  };
  "/orgs/{org}/installation": {
    /**
     * Get an organization installation for the authenticated app
     * @description Enables an authenticated GitHub App to find the organization's installation information.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: operations["apps/get-org-installation"];
  };
  "/orgs/{org}/installations": {
    /**
     * List app installations for an organization
     * @description Lists all GitHub Apps in an organization. The installation count includes
     * all GitHub Apps installed on repositories in the organization.
     *
     * The authenticated user must be an organization owner to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
     */
    get: operations["orgs/list-app-installations"];
  };
  "/orgs/{org}/interaction-limits": {
    /**
     * Get interaction restrictions for an organization
     * @description Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     */
    get: operations["interactions/get-restrictions-for-org"];
    /**
     * Set interaction restrictions for an organization
     * @description Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     */
    put: operations["interactions/set-restrictions-for-org"];
    /**
     * Remove interaction restrictions for an organization
     * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     */
    delete: operations["interactions/remove-restrictions-for-org"];
  };
  "/orgs/{org}/invitations": {
    /**
     * List pending organization invitations
     * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     */
    get: operations["orgs/list-pending-invitations"];
    /**
     * Create an organization invitation
     * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
     * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
     */
    post: operations["orgs/create-invitation"];
  };
  "/orgs/{org}/invitations/{invitation_id}": {
    /**
     * Cancel an organization invitation
     * @description Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     */
    delete: operations["orgs/cancel-invitation"];
  };
  "/orgs/{org}/invitations/{invitation_id}/teams": {
    /**
     * List organization invitation teams
     * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     */
    get: operations["orgs/list-invitation-teams"];
  };
  "/orgs/{org}/issues": {
    /**
     * List organization issues assigned to the authenticated user
     * @description List issues in an organization assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
     *
     * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
     *
     * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
     * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
     * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
     * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     */
    get: operations["issues/list-for-org"];
  };
  "/orgs/{org}/members": {
    /**
     * List organization members
     * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     */
    get: operations["orgs/list-members"];
  };
  "/orgs/{org}/members/{username}": {
    /**
     * Check organization membership for a user
     * @description Check if a user is, publicly or privately, a member of the organization.
     */
    get: operations["orgs/check-membership-for-user"];
    /**
     * Remove an organization member
     * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     */
    delete: operations["orgs/remove-member"];
  };
  "/orgs/{org}/members/{username}/codespaces": {
    /**
     * List codespaces for a user in organization
     * @description Lists the codespaces that a member of an organization has for repositories in that organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["codespaces/get-codespaces-for-user-in-org"];
  };
  "/orgs/{org}/members/{username}/codespaces/{codespace_name}": {
    /**
     * Delete a codespace from the organization
     * @description Deletes a user's codespace.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["codespaces/delete-from-organization"];
  };
  "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": {
    /**
     * Stop a codespace for an organization user
     * @description Stops a user's codespace.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    post: operations["codespaces/stop-in-organization"];
  };
  "/orgs/{org}/members/{username}/copilot": {
    /**
     * Get Copilot seat assignment details for a user
     * @description **Note**: This endpoint is in beta and is subject to change.
     *
     * Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.
     *
     * Organization owners can view GitHub Copilot seat assignment details for members in their organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     */
    get: operations["copilot/get-copilot-seat-details-for-user"];
  };
  "/orgs/{org}/memberships/{username}": {
    /**
     * Get organization membership for a user
     * @description In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
     */
    get: operations["orgs/get-membership-for-user"];
    /**
     * Set organization membership for a user
     * @description Only authenticated organization owners can add a member to the organization or update the member's role.
     *
     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
     *
     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
     *
     * **Rate limits**
     *
     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     */
    put: operations["orgs/set-membership-for-user"];
    /**
     * Remove organization membership for a user
     * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
     *
     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     */
    delete: operations["orgs/remove-membership-for-user"];
  };
  "/orgs/{org}/migrations": {
    /**
     * List organization migrations
     * @description Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
     *
     * A list of `repositories` is only returned for export migrations.
     */
    get: operations["migrations/list-for-org"];
    /**
     * Start an organization migration
     * @description Initiates the generation of a migration archive.
     */
    post: operations["migrations/start-for-org"];
  };
  "/orgs/{org}/migrations/{migration_id}": {
    /**
     * Get an organization migration status
     * @description Fetches the status of a migration.
     *
     * The `state` of a migration can be one of the following values:
     *
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     */
    get: operations["migrations/get-status-for-org"];
  };
  "/orgs/{org}/migrations/{migration_id}/archive": {
    /**
     * Download an organization migration archive
     * @description Fetches the URL to a migration archive.
     */
    get: operations["migrations/download-archive-for-org"];
    /**
     * Delete an organization migration archive
     * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     */
    delete: operations["migrations/delete-archive-for-org"];
  };
  "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    /**
     * Unlock an organization repository
     * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     */
    delete: operations["migrations/unlock-repo-for-org"];
  };
  "/orgs/{org}/migrations/{migration_id}/repositories": {
    /**
     * List repositories in an organization migration
     * @description List all the repositories for this organization migration.
     */
    get: operations["migrations/list-repos-for-org"];
  };
  "/orgs/{org}/organization-fine-grained-permissions": {
    /**
     * List organization fine-grained permissions for an organization
     * @description Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["orgs/list-organization-fine-grained-permissions"];
  };
  "/orgs/{org}/organization-roles": {
    /**
     * Get all organization roles for an organization
     * @description Lists the organization roles available in this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["orgs/list-org-roles"];
    /**
     * Create a custom organization role
     * @description Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    post: operations["orgs/create-custom-organization-role"];
  };
  "/orgs/{org}/organization-roles/teams/{team_slug}": {
    /**
     * Remove all organization roles for a team
     * @description Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["orgs/revoke-all-org-roles-team"];
  };
  "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": {
    /**
     * Assign an organization role to a team
     * @description Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["orgs/assign-team-to-org-role"];
    /**
     * Remove an organization role from a team
     * @description Removes an organization role from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["orgs/revoke-org-role-team"];
  };
  "/orgs/{org}/organization-roles/users/{username}": {
    /**
     * Remove all organization roles for a user
     * @description Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["orgs/revoke-all-org-roles-user"];
  };
  "/orgs/{org}/organization-roles/users/{username}/{role_id}": {
    /**
     * Assign an organization role to a user
     * @description Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    put: operations["orgs/assign-user-to-org-role"];
    /**
     * Remove an organization role from a user
     * @description Remove an organization role from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * The authenticated user must be an administrator for the organization to use this endpoint.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["orgs/revoke-org-role-user"];
  };
  "/orgs/{org}/organization-roles/{role_id}": {
    /**
     * Get an organization role
     * @description Gets an organization role that is available to this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["orgs/get-org-role"];
    /**
     * Delete a custom organization role.
     * @description Deletes a custom organization role. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    delete: operations["orgs/delete-custom-organization-role"];
    /**
     * Update a custom organization role
     * @description Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     *
     * To use this endpoint, the authenticated user must be one of:
     *
     * - An administrator for the organization.
     * - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    patch: operations["orgs/patch-custom-organization-role"];
  };
  "/orgs/{org}/organization-roles/{role_id}/teams": {
    /**
     * List teams that are assigned to an organization role
     * @description Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, you must be an administrator for the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["orgs/list-org-role-teams"];
  };
  "/orgs/{org}/organization-roles/{role_id}/users": {
    /**
     * List users that are assigned to an organization role
     * @description Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
     *
     * To use this endpoint, you must be an administrator for the organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     */
    get: operations["orgs/list-org-role-users"];
  };
  "/orgs/{org}/outside_collaborators": {
    /**
     * List outside collaborators for an organization
     * @description List all users who are outside collaborators of an organization.
     */
    get: operations["orgs/list-outside-collaborators"];
  };
  "/orgs/{org}/outside_collaborators/{username}": {
    /**
     * Convert an organization member to outside collaborator
     * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
     */
    put: operations["orgs/convert-member-to-outside-collaborator"];
    /**
     * Remove outside collaborator from an organization
     * @description Removing a user from this list will remove them from all the organization's repositories.
     */
    delete: operations["orgs/remove-outside-collaborator"];
  };
  "/orgs/{org}/packages": {
    /**
     * List packages for an organization
     * @description Lists packages in an organization readable by the user.
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    get: operations["packages/list-packages-for-organization"];
  };
  "/orgs/{org}/packages/{package_type}/{package_name}": {
    /**
     * Get a package for an organization
     * @description Gets a specific package in an organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    get: operations["packages/get-package-for-organization"];
    /**
     * Delete a package for an organization
     * @description Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
     *
     * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    delete: operations["packages/delete-package-for-org"];
  };
  "/orgs/{org}/packages/{package_type}/{package_name}/restore": {
    /**
     * Restore a package for an organization
     * @description Restores an entire package in an organization.
     *
     * You can restore a deleted package under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    post: operations["packages/restore-package-for-org"];
  };
  "/orgs/{org}/packages/{package_type}/{package_name}/versions": {
    /**
     * List package versions for a package owned by an organization
     * @description Lists package versions for a package owned by an organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    get: operations["packages/get-all-package-versions-for-package-owned-by-org"];
  };
  "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    /**
     * Get a package version for an organization
     * @description Gets a specific package version in an organization.
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    get: operations["packages/get-package-version-for-organization"];
    /**
     * Delete package version for an organization
     * @description Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
     *
     * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    delete: operations["packages/delete-package-version-for-org"];
  };
  "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    /**
     * Restore package version for an organization
     * @description Restores a specific package version in an organization.
     *
     * You can restore a deleted package under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     *
     * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     */
    post: operations["packages/restore-package-version-for-org"];
  };
  "/orgs/{org}/personal-access-token-requests": {
    /**
     * List requests to access organization resources with fine-grained personal access tokens
     * @description Lists requests from organization members to access organization resources with a fine-grained personal access token.
     *
     * Only GitHub Apps can use this endpoint.
     */
    get: operations["orgs/list-pat-grant-requests"];
    /**
     * Review requests to access organization resources with fine-grained personal access tokens
     * @description Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
     *
     * Only GitHub Apps can use this endpoint.
     */
    post: operations["orgs/review-pat-grant-requests-in-bulk"];
  };
  "/orgs/{org}/personal-access-token-requests/{pat_request_id}": {
    /**
     * Review a request to access organization resources with a fine-grained personal access token
     * @description Approves or denies a pending request to access organization resources via a fine-grained personal access token.
     *
     * Only GitHub Apps can use this endpoint.
     */
    post: operations["orgs/review-pat-grant-request"];
  };
  "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories": {
    /**
     * List repositories requested to be accessed by a fine-grained personal access token
     * @description Lists the repositories a fine-grained personal access token request is requesting access to.
     *
     * Only GitHub Apps can use this endpoint.
     */
    get: operations["orgs/list-pat-grant-request-repositories"];
  };
  "/orgs/{org}/personal-access-tokens": {
    /**
     * List fine-grained personal access tokens with access to organization resources
     * @description Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
     *
     * Only GitHub Apps can use this endpoint.
     */
    get: operations["orgs/list-pat-grants"];
    /**
     * Update the access to organization resources via fine-grained personal access tokens
     * @description Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
     *
     * Only GitHub Apps can use this endpoint.
     */
    post: operations["orgs/update-pat-accesses"];
  };
  "/orgs/{org}/personal-access-tokens/{pat_id}": {
    /**
     * Update the access a fine-grained personal access token has to organization resources
     * @description Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
     *
     * Only GitHub Apps can use this endpoint.
     */
    post: operations["orgs/update-pat-access"];
  };
  "/orgs/{org}/personal-access-tokens/{pat_id}/repositories": {
    /**
     * List repositories a fine-grained personal access token has access to
     * @description Lists the repositories a fine-grained personal access token has access to.
     *
     * Only GitHub Apps can use this endpoint.
     */
    get: operations["orgs/list-pat-grant-repositories"];
  };
  "/orgs/{org}/projects": {
    /**
     * List organization projects
     * @description Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    get: operations["projects/list-for-org"];
    /**
     * Create an organization project
     * @description Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    post: operations["projects/create-for-org"];
  };
  "/orgs/{org}/properties/schema": {
    /**
     * Get all custom properties for an organization
     * @description Gets all custom properties defined for an organization.
     * Organization members 